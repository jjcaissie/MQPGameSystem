import gameSystem
import time
import threading
import personalityRunner
import rospy
from std_msgs.msg import String

__stateGame = 0
__stateChatbot = 1

gameData = (" ","")             #Data being sent to personality bot. formatted like (question, answer)
chatbotData = ""                #Data being sent to game system. Should be the robot's response given gameData
    
#ROS Variables
pub = rospy.Publisher('publisher', String, queue_size = 10)
rospy.init_node('publish_node', anonymous=True)
rate = rospy.Rate(10)

def __publishToNode__(publishString):
    rospy.loginfo("Data is being sent")
    pub.publish(publishString)
    rate.sleep()

def main():
    global gameData, chatbotData
    currentState = __stateChatbot
    gameThread = threading.Thread(target=gameSystem.HostServer)
    gameThread.start()

    while True:
        while currentState == __stateGame:                      #If in one of the game states
            gameSystem.setChatbotResponse(chatbotData)
            gameSystem.isServerPaused = False                       #Unpause game server 
            if gameData != gameSystem.getData():                        #Flag for when data is altered
                gameSystem.isServerPaused = True                        #Pause game server
                gameData = gameSystem.getData()                         #Read data from game
                currentState = __stateChatbot                           #Give control to chatbot

        while currentState == __stateChatbot:                   #If in the chatbot state
            if gameSystem.gameState == gameSystem.usrGuessingState:               #If game state is in cpu guess state
                chatbotData = personalityRunner.generateResponse()
                if __name__ == '__main__':
                    print(chatbotData)
                    try:
                        __publishToNode__(chatbotData)
                    except rospy.ROSInterruptException:
                        pass

            elif gameSystem.gameState == gameSystem.cpuGuessingState:             #If game state is in usr guess state
                chatbotData = personalityRunner.generateResponse()
                if __name__ == '__main__':
                    print(chatbotData)
                    try:
                        __publishToNode__(chatbotData)
                    except rospy.ROSInterruptException:
                        pass

            currentState = __stateGame                                  #Give control to game system
        
main()